#!/usr/bin/env bash
# @describe Create and sign (generate a certificate) host/user ssh keys
set -Eeuo pipefail
IFS=$'\n\t'

[ -f ~/.ssh/id_ed25519_ca_sk ] && CAKEY=~/.ssh/id_ed25519_ca_sk || CAKEY=./identities/id_ed25519_ca_sk
ROOTDIR=${ROOTDIR:-.}
[ -d $ROOTDIR ] || mkdir -p "$ROOTDIR"

[ -f "$CAKEY" ] || (echo No CA key >&2; exit 1)

# @cmd Create and sign a host key
# @option -k --key <key>         just sign the given key file
# @option -H --host <hostname>   host name
host() {
  HOST=${argc_host:-$(hostname)}
  [ -z "${argc_key:-''}" ] && ssh-keygen -t ed25519 -C "root@$HOST" -f $ROOTDIR/ssh_host_ed25519
  ssh-keygen -s "$CAKEY" \
       -I "$HOST host key" \
       -V -1m:+3650d \
       -h \
       ${argc_key:-"$ROOTDIR/ssh_host_ed25519.pub"} && \
    echo $ROOTDIR/*-cert.pub |tr ' ' '\n' |xargs -L 1 ssh-keygen -L -f
}

# @cmd Create and sign a user key
# @option -k --key <key>                  just sign the given key file
# @option -i=`$(whoami)@$(hostname)` <ID> certificate identity
# @option -n=`$(whoami)` <p,p,...>        principals
user() {
  [ -v argc_key ] || ssh-keygen -f id_ed25519 -t ed25519
  # principals: must match user sysemd id on server hosts
  ssh-keygen -s "$CAKEY" \
      -I "$argc_i user key" \
      -n "$argc_n" \
      -V -1m:+3650d \
      ${argc_key:-id_ed25519.pub} && \
  ssh-keygen -L -f $(basename ${argc_key:-id_ed25519} .pub)-cert.pub
}

eval "$(argc --argc-eval "$0" "$@")"
